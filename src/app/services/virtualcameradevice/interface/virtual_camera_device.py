# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_virtual_camera_device', [dirname(__file__)])
        except ImportError:
            import _virtual_camera_device
            return _virtual_camera_device
        if fp is not None:
            try:
                _mod = imp.load_module('_virtual_camera_device', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _virtual_camera_device = swig_import_helper()
    del swig_import_helper
else:
    import _virtual_camera_device
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_virtual_camera_device.UYVY_swigconstant(_virtual_camera_device)
UYVY = _virtual_camera_device.UYVY

_virtual_camera_device.YUYV_swigconstant(_virtual_camera_device)
YUYV = _virtual_camera_device.YUYV

_virtual_camera_device.YUV420_swigconstant(_virtual_camera_device)
YUV420 = _virtual_camera_device.YUV420
class RGB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RGB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RGB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _virtual_camera_device.RGB_r_set
    __swig_getmethods__["r"] = _virtual_camera_device.RGB_r_get
    if _newclass:
        r = _swig_property(_virtual_camera_device.RGB_r_get, _virtual_camera_device.RGB_r_set)
    __swig_setmethods__["g"] = _virtual_camera_device.RGB_g_set
    __swig_getmethods__["g"] = _virtual_camera_device.RGB_g_get
    if _newclass:
        g = _swig_property(_virtual_camera_device.RGB_g_get, _virtual_camera_device.RGB_g_set)
    __swig_setmethods__["b"] = _virtual_camera_device.RGB_b_set
    __swig_getmethods__["b"] = _virtual_camera_device.RGB_b_get
    if _newclass:
        b = _swig_property(_virtual_camera_device.RGB_b_get, _virtual_camera_device.RGB_b_set)

    def __init__(self):
        this = _virtual_camera_device.new_RGB()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _virtual_camera_device.delete_RGB
    __del__ = lambda self: None
RGB_swigregister = _virtual_camera_device.RGB_swigregister
RGB_swigregister(RGB)

class YUV422(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, YUV422, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, YUV422, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u"] = _virtual_camera_device.YUV422_u_set
    __swig_getmethods__["u"] = _virtual_camera_device.YUV422_u_get
    if _newclass:
        u = _swig_property(_virtual_camera_device.YUV422_u_get, _virtual_camera_device.YUV422_u_set)
    __swig_setmethods__["y"] = _virtual_camera_device.YUV422_y_set
    __swig_getmethods__["y"] = _virtual_camera_device.YUV422_y_get
    if _newclass:
        y = _swig_property(_virtual_camera_device.YUV422_y_get, _virtual_camera_device.YUV422_y_set)
    __swig_setmethods__["v"] = _virtual_camera_device.YUV422_v_set
    __swig_getmethods__["v"] = _virtual_camera_device.YUV422_v_get
    if _newclass:
        v = _swig_property(_virtual_camera_device.YUV422_v_get, _virtual_camera_device.YUV422_v_set)

    def __init__(self):
        this = _virtual_camera_device.new_YUV422()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _virtual_camera_device.delete_YUV422
    __del__ = lambda self: None
YUV422_swigregister = _virtual_camera_device.YUV422_swigregister
YUV422_swigregister(YUV422)

class VirtualCameraDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirtualCameraDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirtualCameraDevice, name)
    __repr__ = _swig_repr

    def __init__(self, videoDevice, format, width, height, fps):
        this = _virtual_camera_device.new_VirtualCameraDevice(videoDevice, format, width, height, fps)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _virtual_camera_device.delete_VirtualCameraDevice
    __del__ = lambda self: None

    def isWritable(self, timeout):
        return _virtual_camera_device.VirtualCameraDevice_isWritable(self, timeout)

    def write(self, buffer):
        return _virtual_camera_device.VirtualCameraDevice_write(self, buffer)

    def stopDevice(self):
        return _virtual_camera_device.VirtualCameraDevice_stopDevice(self)
VirtualCameraDevice_swigregister = _virtual_camera_device.VirtualCameraDevice_swigregister
VirtualCameraDevice_swigregister(VirtualCameraDevice)

# This file is compatible with both classic and new-style classes.


